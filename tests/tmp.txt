import DeviceThermostatIcon from '@mui/icons-material/DeviceThermostat';
import OpacityIcon from '@mui/icons-material/Opacity';
import { Box, Typography } from "@mui/material";
import moment from "moment";
import Papa from 'papaparse';
import { useEffect, useState } from "react";
import { CartesianGrid, Label, Legend, Line, LineChart, ResponsiveContainer, Tooltip, TooltipProps, XAxis, YAxis } from 'recharts';
import Loading from "../../Loading/Loading";
import { InfluxDBPoint, InfluxDBRow } from "../model/InfluxDBModels";

interface SensorChartProps { }

const SensorChart: React.FC<SensorChartProps> = (props) => {

    const [dataPoints, setDataPoints] = useState<InfluxDBPoint[]>();

    /**
     * Refresh the graph every 10 minutes
     */
    useEffect(() => {

        
        fetchData();

        // Fetch again every 10 minutes.
        const interval = setInterval(() => fetchData(), 1000 * 60 * 10);

        return () => clearInterval(interval);

    }, []);

    const renderCustomToolTip = (data: TooltipProps<string, number>) => {
        if (!Array.isArray(data.payload) || !data.payload.length) {
            return ""
        }

        let point: InfluxDBPoint = data.payload[0].payload;

        return (
            <Box
                display="flex"
                sx={{ borderRadius: 5 }}
                bgcolor={"rgb(255, 255, 255, 0.9)"}
                color="black"
                padding={2}
                alignItems="center"
                justifyContent="center"
            >
                {formatValue(point.temperature)}°C < br />
                {formatValue(point.humidity)}% < br />
                {point.time}
            </Box >
        )
    }

    const formatValue = (temp: string) => {
        return Number(temp).toPrecision(3);
    }

    /**
     * Get the text displayed above the graph
     * @returns 
     */
    const getCurrentTemperatureAndHumidityText = () => {

        if (dataPoints && dataPoints.length > 0) {

            const lastPoint = dataPoints[dataPoints.length - 1];
            const temperature = formatValue(lastPoint.temperature);
            const humidity = formatValue(lastPoint.humidity);

            return (

                <Box display="flex" alignItems="center">

                    <DeviceThermostatIcon fontSize="large" />

                    <Typography variant="h2" marginLeft={2} marginRight={10}>
                        {temperature}°C
                    </Typography>

                    <OpacityIcon fontSize="large" />

                    <Typography variant="h2" marginLeft={2}>
                        {humidity}%
                    </Typography>
                </Box>
            );
        }
        else {

            return (<Box />);
        }
    }

    if (!dataPoints) {
        return <Loading pageName="Temperature & humidity sensor" />
    }

    return (

        <Box
            display="flex"
            alignItems="center"
            justifyContent="center"
            height={1}
        >

            <Box
                display="flex"
                flexDirection="column"
                width={.8}
                alignItems="center"
            >

                {getCurrentTemperatureAndHumidityText()}

                <Typography variant="h2" whiteSpace="pre" marginBottom={2}>

                </Typography>

                <ResponsiveContainer width="100%" aspect={2.0 / 1.0}>

                    <LineChart
                        data={dataPoints}
                    >
                        <XAxis
                            dataKey="time"
                            domain={['auto', 'auto']}
                        />

                        <YAxis width={100} domain={["auto", "auto"]} yAxisId="left">
                            <Label
                                value="Temperature (°C)"
                                angle={-90}
                                position='outside'
                                fill='#676767'
                                fontSize={14}
                            />
                        </YAxis>
                        <Line yAxisId="left" type="monotone" dataKey="temperature" stroke="#8884d8" strokeWidth={2} dot={false} />

                        <YAxis width={100} domain={["auto", "auto"]} yAxisId="right" orientation="right">
                            <Label
                                value="Humidity (%)"
                                angle={-90}
                                position='outside'
                                fill='#676767'
                                fontSize={14}
                            />
                        </YAxis>
                        <Line yAxisId="right" type="monotone" dataKey="humidity" stroke="#f484d8" strokeWidth={2} dot={false} />

                        <Tooltip content={renderCustomToolTip.bind(this)} />
                        <Legend />
                        <CartesianGrid stroke="#eee" strokeDasharray="5 5" />
                    </LineChart>

                </ResponsiveContainer>
            </Box>
        </Box>
    );
}

export default SensorChart;
